[MASTER]

# A comma-separated list of package or module names from where C extensions may be loaded.
# Extensions are loading into the active Python interpreter and may run arbitrary code.
extension-pkg-whitelist=

# Add files or directories to the blacklist. They should be base names, not paths.
ignore=CVS

# Add files or dirs matching the regex patterns to the blacklist. The regex matches against base names, not paths.
ignore-patterns=

# Python code to execute, usually for sys.path manipulation such as pygtk.require().
#init-hook=

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the number of processors available to use.
jobs=1

# Control the amount of potential inferred values when inferring a single object. This
# can help the performance when dealing with large functions or complex, nested conditions.
limit-inference-results=100

# List of plugins (as comma separated values of python modules names) to load, usually to register additional checkers.
load-plugins=

# Pickle collected data for later comparisons.
persistent=yes

# Specify a configuration file.
#rcfile=

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode=yes

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence=

# Disable the message, report, category or checker with the given id(s). You can either give multiple identifiers
# separated by comma (,) or put this option multiple times (only on the command line, not in the configuration
# file where it should appear only once). You can also use "--disable=all" to disable everything first and then
# reenable specific checks. For example, if you want to run only the similarities checker, you can use 
# "--disable=all --enable=similarities". If you want to run only the classes checker, but have no Warning
# level messages displayed, use "--disable=all --enable=classes --disable=W"

disable=print-statement,
        parameter-unpacking,
        unpacking-in-except,
        old-raise-syntax,
        backtick,
        long-suffix,
        old-ne-operator,
        old-octal-literal,
        import-star-module-level,
        non-ascii-bytes-literal,
        raw-checker-failed,
        bad-inline-option,
        locally-disabled,
        file-ignored,
        suppressed-message,
        useless-suppression,
        deprecated-pragma,
        basestring-builtin,
        buffer-builtin,
        cmp-builtin,
        coerce-builtin,
        execfile-builtin,
        file-builtin,
        long-builtin,
        raw_input-builtin,
        reduce-builtin,
        standarderror-builtin,
        unicode-builtin,
        xrange-builtin,
        coerce-method,
        delslice-method,
        getslice-method,
        setslice-method,
        no-absolute-import,
        old-division,
        dict-iter-method,
        dict-view-method,
        next-method-called,
        metaclass-assignment,
        indexing-exception,
        raising-string,
        reload-builtin,
        oct-method,
        hex-method,
        nonzero-method,
        cmp-method,
        input-builtin,
        round-builtin,
        intern-builtin,
        unichr-builtin,
        map-builtin-not-iterating,
        zip-builtin-not-iterating,
        range-builtin-not-iterating,
        filter-builtin-not-iterating,
        using-cmp-argument,
        eq-without-hash,
        div-method,
        idiv-method,
        rdiv-method,
        exception-message-attribute,
        invalid-str-codec,
        sys-max-int,
        bad-python3-import,
        deprecated-string-function,
        deprecated-str-translate-call,
        deprecated-itertools-function,
        deprecated-types-field,
        next-method-defined,
        dict-items-not-iterating,
        dict-keys-not-iterating,
        dict-values-not-iterating,
        deprecated-operator-function,
        deprecated-urllib-function,
        xreadlines-attribute,
        deprecated-sys-function,
        exception-escape,
        comprehension-escape,
        unused-wildcard-import,
        wildcard-import,
        misplaced-comparison-constant,
        unused-import,
        missing-docstring,
        invalid-name,
        broad-except,
        consider-using-enumerate,
        f-string-without-interpolation,
        global-statement,
        no-member,
        too-few-public-methods,
        too-many-locals



[REPORTS]

# Python expression which should return a note less than 10 (10 is the highest note). You have access to
# the variables errors warning, statement which respectively contain the number of errors / warnings messages
# and the total number of statements analyzed. This is used by the global evaluation report (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)


# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass.
output-format=text

# Tells whether to display a full report or only the messages.
reports=no

# Activate the evaluation score.
score=yes


[REFACTORING]

# Maximum number of nested blocks for function / method body
max-nested-blocks=5

# Complete name of functions that never returns. When checking for inconsistent-return-statements if a never returning
# function is called then it will be considered as an explicit return statement and no message will be printed.
never-returning-functions=sys.exit


[STRING]

# This flag controls whether the implicit-str-concat-in-sequence should generate a warning on
# implicit string concatenation in sequences defined over several lines.
check-str-concat-over-line-jumps=yes


[FORMAT]

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=LF

# String used as indentation unit. This is usually "    " (4 spaces) or "\t"
indent-string='    '

# Maximum number of characters on a single line.
max-line-length=140

# Maximum number of lines in a module.
max-module-lines=10000

# List of optional constructs for which whitespace checking is disabled. `dict-separator` is used to
# allow tabulation in dicts, etc.: {1  : 1,\n222: 2}. `trailing-comma` allows a space between comma and
# closing bracket: (a, ). `empty-line` allows space-only lines.
no-space-check=trailing-comma,dict-separator

# Allow the body of a class to be on the same line as the declaration if body contains single statement.
single-line-class-stmt=no

# Allow the body of an if to be on the same line as the test if there is no else.
single-line-if-stmt=no


[BASIC]

# Naming style matching correct argument names.
argument-naming-style=snake_case

# Naming style matching correct attribute names.
attr-naming-style=snake_case


# ***************** I am disabling "invalid-name" in general. snake_case enforcment would be nice but 
# it seems to be way to broad, catches so many cases like var = "" which it thinks has to be a constant and what not.

# -------------------------------- this in theory is useful but not in practice as i explained. 
# Bad variable names which should always be refused, separated by a comma.
# bad-names=foo, bar

# Good variable names which should always be accepted, separated by a comma.
# good-names=i, j, k, ex, Run, _, p, ch
# --------------------------------

[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,
      XXX

